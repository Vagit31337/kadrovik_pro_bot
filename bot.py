import logging
from config import BOT_TOKEN
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters
)
from handlers import catalog, cart, payments, admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–ª–∞–Ω–∫–∏ –ø—Ä–∏–∫–∞–∑–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )
    buttons = [
        [InlineKeyboardButton("üìÅ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")]
    ]
    
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))

def main() -> None:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin.admin_start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(start, pattern="main_menu"))
    application.add_handler(CallbackQueryHandler(catalog.show_categories, pattern="catalog"))
    application.add_handler(CallbackQueryHandler(catalog.show_items, pattern="category_"))
    application.add_handler(CallbackQueryHandler(catalog.item_details, pattern="item_"))
    
    application.add_handler(CallbackQueryHandler(cart.view_cart, pattern="view_cart"))
    application.add_handler(CallbackQueryHandler(cart.add_to_cart, pattern="add_"))
    application.add_handler(CallbackQueryHandler(cart.clear_cart, pattern="clear_cart"))
    
    application.add_handler(CallbackQueryHandler(payments.checkout, pattern="checkout"))
    application.add_handler(CallbackQueryHandler(payments.confirm_payment, pattern="confirm_payment"))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤
    application.add_handler(MessageHandler(
        filters.PHOTO | filters.Document.ALL,
        payments.handle_receipt
    ))
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    application.add_handler(CallbackQueryHandler(admin.admin_add_product_start, pattern="admin_add_product"))
    application.add_handler(CallbackQueryHandler(admin.admin_remove_product, pattern="admin_remove_product"))
    application.add_handler(CallbackQueryHandler(admin.admin_view_orders, pattern="admin_view_orders"))
    application.add_handler(CallbackQueryHandler(admin.admin_confirm_remove, pattern="remove_"))
    application.add_handler(CallbackQueryHandler(admin.cancel, pattern="cancel|admin_back"))
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin.admin_add_product_start, pattern="admin_add_product")],
        states={
            admin.CATEGORY: [
                CallbackQueryHandler(admin.admin_add_product_category),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin.admin_add_product_name)
            ],
            admin.NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin.admin_add_product_price)
            ],
            admin.PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin.admin_add_product_file)
            ],
            admin.FILE: [
                MessageHandler(filters.Document.ALL, admin.admin_add_product_file)
            ]
        },
        fallbacks=[CommandHandler('cancel', admin.cancel)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()