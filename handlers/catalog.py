import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)
PRODUCTS_FILE = 'data/products.json'

def load_products():
    try:
        with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return {"categories": []}

async def show_categories(update: Update, context: CallbackContext) -> None:
    products = load_products()
    buttons = []
    for category in products["categories"]:
        buttons.append([InlineKeyboardButton(category["name"], callback_data=f"category_{category['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    buttons.append([InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")])
    buttons.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    query = update.callback_query
    await query.edit_message_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_items(update: Update, context: CallbackContext) -> None:
    category_id = update.callback_query.data.split("_", 1)[1]
    products = load_products()
    
    category = next((cat for cat in products["categories"] if cat["id"] == category_id), None)
    if not category:
        await update.callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    buttons = []
    for item in category["items"]:
        buttons.append([InlineKeyboardButton(f"{item['name']} - {item['price']}‚ÇΩ", callback_data=f"item_{item['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    buttons.append([InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")])
    
    await update.callback_query.edit_message_text(
        f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def item_details(update: Update, context: CallbackContext) -> None:
    item_id = update.callback_query.data.split("_", 1)[1]
    products = load_products()
    
    item = None
    category_with_item = None
    for category in products["categories"]:
        for product in category["items"]:
            if product["id"] == item_id:
                item = product
                category_with_item = category
                break
        if item: 
            break
    
    if not item:
        await update.callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    text = (
        f"üìù *{item['name']}*\n\n"
        f"–¶–µ–Ω–∞: *{item['price']}‚ÇΩ*\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?"
    )
    
    buttons = [
        [InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item_id}")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category_with_item['id']}")]
    ]
    
    await update.callback_query.edit_message_text(
        text, 
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )