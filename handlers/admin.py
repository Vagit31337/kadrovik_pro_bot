import json
import logging
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, filters
from config import ADMIN_ID

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
CATEGORY, NAME, PRICE, FILE = range(4)

async def admin_start(update: Update, context: CallbackContext) -> None:
    from config import ADMIN_ID
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: "
            f"ID={update.effective_user.id}, "
            f"Username=@{update.effective_user.username}"
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_remove_product")],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_view_orders")]
    ]
    
    await update.message.reply_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_add_product_start(update: Update, context: CallbackContext) -> int:
    if update.callback_query.from_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    with open('data/products.json', 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    buttons = []
    for category in products["categories"]:
        buttons.append([InlineKeyboardButton(category["name"], callback_data=f"cat_{category['id']}")])
    
    buttons.append([InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="new_category")])
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await update.callback_query.edit_message_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(buttons))
    
    return CATEGORY

async def admin_add_product_category(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == "new_category":
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        context.user_data['new_category'] = True
        return CATEGORY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_id = data.split('_')[1]
    context.user_data['category_id'] = category_id
    context.user_data['new_category'] = False
    
    await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return NAME

async def admin_add_product_name(update: Update, context: CallbackContext) -> int:
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if context.user_data.get('new_category'):
        category_name = update.message.text
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        new_category_id = f"cat_{uuid.uuid4().hex[:8]}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ products.json
        with open('data/products.json', 'r+', encoding='utf-8') as f:
            products = json.load(f)
            products["categories"].append({
                "id": new_category_id,
                "name": category_name,
                "items": []
            })
            f.seek(0)
            json.dump(products, f, indent=2, ensure_ascii=False)
            f.truncate()
        
        context.user_data['category_id'] = new_category_id
        context.user_data['new_category'] = False
        await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        return NAME
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    return PRICE

async def admin_add_product_price(update: Update, context: CallbackContext) -> int:
    try:
        price = int(update.message.text)
        context.user_data['price'] = price
        await update.message.reply_text("üìé –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞ (–¥–æ–∫—É–º–µ–Ω—Ç):")
        return FILE
    except ValueError:
        await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PRICE

async def admin_add_product_file(update: Update, context: CallbackContext) -> int:
    if not update.message.document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç!")
        return FILE
    
    file_id = update.message.document.file_id
    context.user_data['file_id'] = file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    category_id = context.user_data['category_id']
    name = context.user_data['name']
    price = context.user_data['price']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    item_id = f"item_{uuid.uuid4().hex[:8]}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ products.json
    with open('data/products.json', 'r+', encoding='utf-8') as f:
        products = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category in products["categories"]:
            if category["id"] == category_id:
                category["items"].append({
                    "id": item_id,
                    "name": name,
                    "price": price,
                    "file_id": file_id
                })
                break
        
        f.seek(0)
        json.dump(products, f, indent=2, ensure_ascii=False)
        f.truncate()
    
    await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    return ConversationHandler.END

async def admin_remove_product(update: Update, context: CallbackContext) -> None:
    if update.callback_query.from_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    with open('data/products.json', 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    buttons = []
    for category in products["categories"]:
        for item in category["items"]:
            buttons.append([
                InlineKeyboardButton(
                    f"‚ùå {category['name']} - {item['name']}",
                    callback_data=f"remove_{item['id']}"
                )
            ])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await update.callback_query.edit_message_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def admin_confirm_remove(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    item_id = query.data.split('_')[1]
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ products.json
    with open('data/products.json', 'r+', encoding='utf-8') as f:
        products = json.load(f)
        
        for category in products["categories"]:
            category["items"] = [item for item in category["items"] if item["id"] != item_id]
        
        f.seek(0)
        json.dump(products, f, indent=2, ensure_ascii=False)
        f.truncate()
    
    await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

async def admin_view_orders(update: Update, context: CallbackContext) -> None:
    if update.callback_query.from_user.id != ADMIN_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        with open('data/orders.json', 'r', encoding='utf-8') as f:
            orders = json.load(f)
    except FileNotFoundError:
        await update.callback_query.edit_message_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return
    
    if not orders:
        await update.callback_query.edit_message_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return
    
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for user_id, order in orders.items():
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.get('username', 'Unknown')} (ID: {user_id})\n"
        text += f"üìÖ –î–∞—Ç–∞: {order.get('date', 'N/A')}\n"
        text += f"üíé –°—É–º–º–∞: {order.get('total', 0)}‚ÇΩ\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {order.get('status', 'pending')}\n"
        text += "------------------------\n"
    
    await update.callback_query.edit_message_text(text)

async def cancel(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        await update.callback_query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    context.user_data.clear()
    return ConversationHandler.END