import json
import logging
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
ADMIN_ID = 999077284

async def checkout(update: Update, context: CallbackContext) -> None:
    from .cart import get_user_cart
    
    user_id = update.callback_query.from_user.id
    cart = get_user_cart(user_id)
    
    if not cart:
        await update.callback_query.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    total = sum(item["price"] * item["quantity"] for item in cart)
    
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    payment_details = (
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
        "–°–±–µ—Ä–±–∞–Ω–∫: `1234 5678 9012 3456`\n"
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ: `9876 5432 1098 7654`\n"
        "QIWI: `+79991234567`\n\n"
        "üí† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
        f"`ORDER_{user_id}`"
    )
    
    buttons = [
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_cart")]
    ]
    
    await update.callback_query.edit_message_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{total}‚ÇΩ*\n\n{payment_details}",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

async def confirm_payment(update: Update, context: CallbackContext) -> None:
    await update.callback_query.edit_message_text(
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.\n\n"
        "‚ùó –í–∞–∂–Ω–æ: —á–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        "- –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "- –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞\n"
        "- –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
    )

async def handle_receipt(update: Update, context: CallbackContext) -> None:
    from .cart import get_user_cart, clear_user_cart
    
    user = update.message.from_user
    user_id = user.id
    cart = get_user_cart(user_id)
    
    if not cart:
        await update.message.reply_text("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    total = sum(item["price"] * item["quantity"] for item in cart)
    order_details = "\n".join(
        f"- {item['name']} x{item['quantity']} = {item['price'] * item['quantity']}‚ÇΩ"
        for item in cart
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    order_data = {
        "user_id": user_id,
        "username": user.username or user.full_name,
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
        "items": cart.copy(),
        "total": total,
        "status": "pending",
        "receipt_file_id": file_id
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ orders.json
    orders = {}
    try:
        with open('data/orders.json', 'r', encoding='utf-8') as f:
            content = f.read()
            if content.strip():
                orders = json.loads(content)
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    orders[str(user_id)] = order_data
    
    try:
        with open('data/orders.json', 'w', encoding='utf-8') as f:
            json.dump(orders, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} ({user.full_name})\n"
            f"üÜî ID: {user_id}\n\n"
            f"üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{order_details}\n\n"
            f"üíé –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É
        if update.message.photo:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=file_id,
                caption="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
            )
        else:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=file_id,
                caption="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    clear_user_cart(user_id)
    await update.message.reply_text(
        "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
        "‚åõ –§–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."
    )