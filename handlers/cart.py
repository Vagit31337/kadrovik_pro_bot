import json
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)
CART_FILE = 'data/carts.json'

def get_user_cart(user_id: int) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏"""
    if not os.path.exists(CART_FILE):
        return []
    
    try:
        with open(CART_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return []
                
            carts = json.loads(content)
            return carts.get(str(user_id), [])
            
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return []
    
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return []

def save_user_cart(user_id: int, cart: list) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏"""
    carts = {}
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        if os.path.exists(CART_FILE):
            with open(CART_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    carts = json.loads(content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    carts[str(user_id)] = cart
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    try:
        with open(CART_FILE, 'w', encoding='utf-8') as f:
            json.dump(carts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

def clear_user_cart(user_id: int) -> None:
    save_user_cart(user_id, [])

async def view_cart(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    cart = get_user_cart(user_id)
    
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cart}")
    
    if not cart:
        await update.callback_query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    total = sum(item["price"] * item["quantity"] for item in cart)
    text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    for item in cart:
        text += f"‚Ä¢ {item['name']} x{item['quantity']} = {item['price'] * item['quantity']}‚ÇΩ\n"
    text += f"\nüíé –ò—Ç–æ–≥–æ: *{total}‚ÇΩ*"
    
    buttons = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("üìÅ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

async def add_to_cart(update: Update, context: CallbackContext) -> None:
    from .catalog import load_products
    
    query = update.callback_query
    await query.answer()
    item_id = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
    products = load_products()
    item = None
    for category in products.get("categories", []):
        for product in category.get("items", []):
            if product["id"] == item_id:
                item = product.copy()
                break
        if item: 
            break
    
    if not item:
        await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = get_user_cart(user_id)
    found = False
    for i, cart_item in enumerate(cart):
        if cart_item["id"] == item_id:
            cart[i]["quantity"] += 1
            found = True
            break
    
    if not found:
        item["quantity"] = 1
        cart.append(item)
    
    save_user_cart(user_id, cart)
    await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

async def clear_cart(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    clear_user_cart(user_id)
    await update.callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await view_cart(update, context)